"""Utilities for the tools folder."""

from typing import IO, NamedTuple


class DataType(NamedTuple):
    """Represents a C datatype."""

    size_bytes: int
    signed: bool

    @staticmethod
    def from_int(i: int, signed: bool) -> "DataType":
        """Given an integer, determine the minimum-sized data type required."""
        for width in [1, 2, 4]:
            if i < (2 ** ((8 * width) - (1 if signed else 0))):
                return DataType(width, signed)
        raise ValueError("value out of range")

    @staticmethod
    def from_list(l: list[int]) -> "DataType":
        """Given an array of integers, determine the minimum-sized data type required."""
        return DataType.from_int(max([abs(x) for x in l]), any(x < 0 for x in l))

    def to_ctype(self) -> str:
        """Return the C type name for this datatype."""
        return f"{'s' if self.signed else 'u'}{8 * self.size_bytes}"


def _find_tags(lines: list[str], start_tag: str, end_tag: str | None):
    start_index = lines.index(start_tag + "\n")
    end_index = (
        lines.index(end_tag + "\n", start_index) if end_tag is not None else len(lines)
    )
    return start_index, end_index


def extract_between_tags(lines: list[str], start_tag: str, end_tag: str) -> list[str]:
    """Extract lines between the two tags."""
    start_index, end_index = _find_tags(lines, start_tag, end_tag)
    return [l.rstrip("\n") for l in lines[start_index + 1 : end_index]]


def insert_file(file: IO, insert_lines: list[str], start_tag: str, end_tag: str | None):
    """
    Search for a tagged begin/end string pair in the given file, and insert the
    given lines between those tags.
    """
    lines = file.readlines()
    start_index, end_index = _find_tags(lines, start_tag, end_tag)
    file.seek(0)
    file.truncate(0)
    file.writelines(lines[: start_index + 1] + insert_lines + lines[end_index:])


def insert_c_file(file: IO, insert_lines: list[str], tag: str):
    """
    Search for a standard tag pair in the given file, and insert contents between this pair.
    """
    insert_file(
        file,
        insert_lines,
        *(f"/*{t} Generated by `unicode_data.py {tag}` */" for t in "Tt"),
    )
